#!/bin/bash

set -e

if [[ $VERBOSE -eq 1 ]]; then
    set -x
fi

if ! command jupyter --version > /dev/null; then
    echo "Please install jupyter"
    exit 1
fi

declare content
content=$(find content -name "*.md" -exec sh -c 'head -n 10 "$1" | grep -l "^jupyter_notebook:" "$1"' sh {} \;)
readonly content

# For a given file specified (anywhere in the filesystem), find the URL of the repository it belongs to
# and builds the actual URL of the file in the repository
get_repo_url_for_file() {
    local file_path="$1"
    local file_dir=$(dirname "$(realpath "$file_path")")
    local repo_root=""
    local repo_url=""
    local relative_path=""

    # Find the git repository root
    cd "$file_dir" 1>/dev/null
    repo_root=$(git rev-parse --show-toplevel 2>/dev/null)
    if [ -z "$repo_root" ]; then
        echo "Error: File is not in a git repository" >&2
        return 1
    fi

    # Get the repository URL
    repo_url=$(git config --get remote.origin.url)
    if [ -z "$repo_url" ]; then
        echo "Error: Could not determine repository URL" >&2
        return 1
    fi

    cd "-" 1>/dev/null

    # Convert SSH URL to HTTPS URL if needed
    if [[ "$repo_url" == git@* ]]; then
        # Convert git@github.com:user/repo.git to https://github.com/user/repo
        repo_url=$(echo "$repo_url" | sed -E 's|git@([^:]+):|https://\1/|' | sed 's|\.git$||')
    elif [[ "$repo_url" == https://* ]]; then
        # Remove .git suffix if present
        repo_url=$(echo "$repo_url" | sed 's|\.git$||')
    fi

    # Get the relative path of the file within the repository
    # Use Python for cross-platform compatibility (macOS doesn't support realpath --relative-to)
    relative_path=$(python3 -c "import os.path; print(os.path.relpath('$(realpath "$file_path")', '$(realpath "$repo_root")'))")

    # Determine the default branch (main or master)
    local default_branch=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's|^refs/remotes/origin/||')
    if [ -z "$default_branch" ]; then
        default_branch="main" # Fallback to main if we can't determine
    fi

    # Build the full URL to the file in the repository
    if [[ "$repo_url" == *"github.com"* ]]; then
        echo -n "${repo_url}/blob/${default_branch}/${relative_path}"
    elif [[ "$repo_url" == *"gitlab.com"* ]]; then
        echo -n "${repo_url}/-/blob/${default_branch}/${relative_path}"
    else
        # Generic format for other git hosting services
        echo -n "${repo_url}/blob/${default_branch}/${relative_path}"
    fi
}

for file in $content; do
    notebook=$(head -n 10 "$file" | grep "^jupyter_notebook:" | sed 's/^jupyter_notebook: //')
    echo "Processing: $file @ $notebook"

    nb_repo_link=$(get_repo_url_for_file ".$notebook")
    echo "Repo link: $nb_repo_link"

    output_dir="$(dirname "$file")"

    resources_dir="content/_static/notebooks/${output_dir#content/}"
    mkdir -p "$resources_dir"

    gen_files_dir="$output_dir/$(basename "$file" .md).gen_files"
    if [[ -e "$gen_files_dir" ]]; then
        rm -rf "$gen_files_dir"
    fi

    jupyter nbconvert --to markdown ".$notebook" --output-dir "$output_dir" --output "$(basename "$file" .md).gen"

    # Save the front matter from the original file and append the new content
    front_matter=$(sed -n '/^---$/,/^---$/p' "$file")
    tmp_file="$output_dir/$(basename "$file" .md).gen.md"

    # Create a new file with front matter and converted content
    echo '---' > "$file.new"
    echo "$front_matter" | grep -v '^---' | grep -v content_hash >> "$file.new"
    echo "content_hash: $(shasum -a 256 ".$notebook" | cut -d ' ' -f 1) # hash managed by Makefile.jupyter (do not edit)" >> "$file.new"
    echo '---' >> "$file.new"
    echo "" >> "$file.new"
    cat <<EOF >> "$file.new"
<!--

   This file was generated by Makefile.jupyter. Do not edit this file directly.

   The only parts of this file that should be edited are the front matter and the
   comment at the top of the file.

-->

{{< right mb="2rem" >}}
{{< download "${nb_repo_link}" "Download this notebook" >}}
{{< /right >}}
EOF
    echo "" >> "$file.new"
    cat "$tmp_file" \
        | sed -e "s#\($(basename "$file" .md).gen_files\)#../\1#" \
        | python tools/jupyter_generator/markdown_cleanup.py \
        >> "$file.new"

    # Replace original file and clean up
    mv "$file.new" "$file"
    rm "$tmp_file"

    echo "Completed processing: $file"
done
